import json
import requests
import openai

SECRETS_PATH = 'secrets.json'
OUTPUT_URL = 'https://centrala.ag3nts.org/report'

# Load secrets from secrets.json
def load_secrets(filepath):
    """Load API keys from the secrets file."""
    with open(filepath, 'r') as file:
        secrets = json.load(file)
    return secrets['open_api_key'], secrets['central_key']

# Load API keys
open_api_key, central_key = load_secrets(SECRETS_PATH)

# Set the OpenAI API key
openai.api_key = open_api_key  # Set the OpenAI API key from secrets.json

def get_chatgpt_response(question):
    try:
        # Send the query to the model
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # Or "gpt-4" depending on availability
            messages=[
                {"role": "user", "content": question + " Answer in one word."}
            ]
        )
        # Get the response content
        answer_content = response['choices'][0]['message']['content']
        return answer_content
    except openai.error.OpenAIError as e:
        # Handle OpenAI API errors
        print(f"OpenAI API Error: {e}")
        return None

# Properly format the URL with central_key
DATA_URL_TEMPLATE = f'https://centrala.ag3nts.org/data/{central_key}/json.txt'

try:
    # Fetch data from the URL
    response = requests.get(DATA_URL_TEMPLATE)
    response.raise_for_status()  # Check for HTTP errors

    # Convert data to JSON and store it in the variable
    data = response.json()

    # Now the variable `data` stores the JSON data
    print("Fetched Data: ", json.dumps(data, indent=4))  # You can print or use data as needed

except requests.exceptions.RequestException as e:
    print(f"Error fetching data: {e}")
    data = {}

# Process test data
for item in data.get("test-data", []):
    question = item.get("question")

    if question:
        try:
            # Evaluate the arithmetic expression in "question"
            result = eval(question)  # eval executes arithmetic expressions
            item["answer"] = result
            # Check if the "test" key exists
            if "test" in item:
                print(f"'test' tag found: {item['test']}")
                item['test']['a'] = get_chatgpt_response(item['test']['q'])
                print(item['test']['a'])

        except Exception as e:
            print(f"Error evaluating expression '{question}': {e}")

# Add API key to the data
data["apikey"] = central_key
print("Prepared data for sending:", json.dumps(data, indent=4))  # Log the data before sending

def send_json_to_api(OUTPUT_URL, json_data):
    headers = {'Content-Type': 'application/json; charset=utf-8'}
    try:
        # Print json_data to confirm its structure before sending
        print("Sending JSON data:", json.dumps(json_data, indent=4, ensure_ascii=False))  # DEBUG LOG

        response = requests.post(OUTPUT_URL, json=json_data, headers=headers)
        response.raise_for_status()  # Check for request errors

        # Print response data
        print("Response:", response.text)

        response_data = response.json()
        return response_data
    except requests.exceptions.RequestException as e:
        print(f"Error sending request: {e}")
        return None

def build_json_message(data):
    # Prepare the JSON message with task and API key
    json_message = {
        "task": "JSON",
        "apikey": central_key,
        "answer": data
    }

    # Convert to JSON string with proper formatting
    return json_message

# Prepare JSON output
json_output = build_json_message(data)
print("Sending JSON data:", json.dumps(json_output, indent=4, ensure_ascii=False))  # Log JSON data before sending

# Send JSON output to API
response_data = send_json_to_api(OUTPUT_URL, json_output)
if response_data:
    print("Response from API:", response_data)